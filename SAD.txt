local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local placeId = game.PlaceId

-- Configurations
local G_AutoPlay = true
local G_AutoUpgrade = true
local G_Tower = "Nog Dam" -- Replace "Nog Dam" with the desired tower name

local basePosition = Vector3.new(-30.740604400634766, 81.7170181274414, 62.73944091796875)
local placementRadius = 1 -- Reduced distance between the towers
local placementIncrement = 1 -- Reduced distance increment for each subsequent tower placement
local voteSkipCount = 0 -- Counter for VoteForSkip

-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Create a grey Frame to cover the whole screen
local greyFrame = Instance.new("Frame")
greyFrame.Size = UDim2.new(1, 0, 1, 0)
greyFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Grey color
greyFrame.BackgroundTransparency = 0.2 -- Reduced transparency for more bold appearance
greyFrame.Parent = screenGui

-- Create a TextLabel for "Shiny Hub" with a highlight effect
local shinyHubLabel = Instance.new("TextLabel")
shinyHubLabel.Text = "Shiny Hub"
shinyHubLabel.Size = UDim2.new(0, 400, 0, 100)
shinyHubLabel.Position = UDim2.new(0.5, -200, 0.45, -50) -- Centered horizontally
shinyHubLabel.BackgroundTransparency = 1 -- No background
shinyHubLabel.TextColor3 = Color3.fromRGB(255, 215, 0) -- Gold color for highlight
shinyHubLabel.TextScaled = true -- Scale text to fit
shinyHubLabel.Font = Enum.Font.SourceSansBold
shinyHubLabel.Parent = greyFrame

-- Add a UIStroke to "Shiny Hub" to make it stand out more
local uiStrokeShiny = Instance.new("UIStroke")
uiStrokeShiny.Thickness = 3
uiStrokeShiny.Color = Color3.fromRGB(255, 255, 255) -- White stroke color
uiStrokeShiny.Parent = shinyHubLabel

-- Create a TextLabel for "gem" below "Shiny Hub"
local gemLabel = Instance.new("TextLabel")
gemLabel.Text = "gem"
gemLabel.Size = UDim2.new(0, 250, 0, 60)
gemLabel.Position = UDim2.new(0.5, -125, 0.55, 0) -- Centered horizontally, below "Shiny Hub"
gemLabel.BackgroundTransparency = 1 -- No background
gemLabel.TextColor3 = Color3.fromRGB(135, 206, 250) -- Light blue color for "gem"
gemLabel.TextScaled = true -- Scale text to fit
gemLabel.Font = Enum.Font.GothamBlack -- Use GothamBlack for a stronger look
gemLabel.Parent = greyFrame

-- Add a UIStroke to "gem" to enhance its appearance
local uiStrokeGem = Instance.new("UIStroke")
uiStrokeGem.Thickness = 4
uiStrokeGem.Color = Color3.fromRGB(0, 0, 139) -- Dark blue stroke color for contrast
uiStrokeGem.Parent = gemLabel

-- Add a UIGradient to "gem" for a gradient effect
local uiGradientGem = Instance.new("UIGradient")
uiGradientGem.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(173, 216, 230)), -- Light blue at the top
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 191, 255)) -- Deeper blue at the bottom
}
uiGradientGem.Parent = gemLabel

-- Update gemLabel to show the player's gem count
local function updateGemCount()
    local playerGems = LocalPlayer:WaitForChild("Gems", 5) -- Wait for Gems folder in the player's character
    if playerGems then
        gemLabel.Text = "gem: " .. tostring(playerGems.Value) -- Display gem count
    end
end

updateGemCount() -- Initial update
LocalPlayer.ChildAdded:Connect(updateGemCount) -- Update when new child is added (e.g., when the gem count changes)

-- Function to teleport the player to a specific position
local function teleportPlayer()
    local teleportPosition = Vector3.new(-155.1929626468438, 2.9448108673095703, -54.5617790222168)
    LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
end

-- Function to handle actions specific to Place ID 15601725874
local function handlePlaceIdSpecificActions()
    if placeId == 15601725874 then
        teleportPlayer()
        wait(3)

        local args = {
            [1] = "Level",
            [2] = "Infinity"
        }
        workspace.StoryElevators.Elevator.ElevatorServer.ChangeStory:FireServer(unpack(args))
        
        workspace.StoryElevators.Elevator.ElevatorServer.Choose:FireServer()
        
        workspace.StoryElevators.Elevator.ElevatorServer.QuickStart:FireServer()
    end
end

-- Function to place towers near the base position and gradually move farther away
local function placeTowers()
    for i = 1, 10 do -- Number of towers to place (adjust as needed)
        local position = basePosition + Vector3.new(math.random(-placementRadius, placementRadius), 0, math.random(-placementRadius, placementRadius))
        local args = {
            [1] = LocalPlayer.OwnedTowers:FindFirstChild(G_Tower),
            [2] = CFrame.new(position) * CFrame.Angles(0, 0, 0),
            [3] = false,
            [4] = true
        }
        ReplicatedStorage.Functions.SpawnTower:InvokeServer(unpack(args))
        
        -- Increase the placement radius for the next tower
        placementRadius = placementRadius + placementIncrement
        
        -- Wait 10 seconds before placing the next tower
        wait(10)
    end
end

-- Function to randomly upgrade placed towers
local function upgradeTowers()
    if G_AutoUpgrade then
        for _, tower in ipairs(workspace.Towers:GetChildren()) do
            if tower.Name == G_Tower then
                local args = {
                    [1] = tower
                }
                ReplicatedStorage.Functions.Upgrade:InvokeServer(unpack(args))
            end
        end
    end
end

-- Function to vote for starting the game
local function voteStartGame()
    ReplicatedStorage.Events.Client.VoteStartGame:FireServer()
end

-- Function to vote for skipping rounds
local function voteForSkip()
    for i = 1, 15 do
        ReplicatedStorage.Functions.VoteForSkip:InvokeServer()
        wait(0.5) -- Adjust the delay between votes if needed
    end
end

-- Auto-replay function that checks if the Mobs folder is empty before replaying
local function autoReplay()
    if G_AutoPlay then
        -- Wait for 2 minutes after VoteForSkip has been called 15 times
        wait(120)

        while true do
            local gameEnded = false
            local mobsFolder = workspace:FindFirstChild("Mobs")

            -- Check if the Mobs folder exists and is empty
            if mobsFolder then
                if #mobsFolder:GetChildren() == 0 then
                    gameEnded = true
                end
            else
                -- If Mobs folder doesn't exist, consider the game ended
                gameEnded = true
            end

            if gameEnded then
                -- Wait 5 seconds before initiating the replay to ensure game end is detected
                wait(5)
                local args = {
                    [1] = "Replay"
                }
                ReplicatedStorage.Events.ExitGame:FireServer(unpack(args))
                break -- Exit the loop after initiating the replay
            else
                wait(1) -- Check again after 1 second
            end
        end
    end
end

-- Main loop to handle the tower placement, upgrades, voting, and replay
local function main()
    -- Execute Place ID-specific actions
    handlePlaceIdSpecificActions()

    -- Wait 10 seconds before executing other functions
    wait(10)

    -- Vote to start the game
    voteStartGame()

    -- Vote for skipping rounds 15 times
    voteForSkip()

    -- Start the auto-replay function in a separate thread after voting
    spawn(autoReplay)

    -- Main loop to place towers and upgrade them
    while true do
        placeTowers()
        upgradeTowers()

        -- Wait 5 seconds before the next placement and upgrade cycle
        wait(5)
    end
end

-- Start the main function
main()
