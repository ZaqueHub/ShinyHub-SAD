-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create a solid grey Frame to cover the whole screen
local greyFrame = Instance.new("Frame")
greyFrame.Size = UDim2.new(1, 0, 1, 0)
greyFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Grey color
greyFrame.BackgroundTransparency = 0 -- No transparency, making it solid
greyFrame.Parent = screenGui

-- Create a TextLabel for "Shiny Hub" with a highlight effect
local shinyHubLabel = Instance.new("TextLabel")
shinyHubLabel.Text = "Shiny Hub"
shinyHubLabel.Size = UDim2.new(0, 400, 0, 100)
shinyHubLabel.Position = UDim2.new(0.5, -200, 0.45, -50) -- Centered horizontally
shinyHubLabel.BackgroundTransparency = 1 -- No background
shinyHubLabel.TextColor3 = Color3.fromRGB(255, 215, 0) -- Gold color for highlight
shinyHubLabel.TextScaled = true -- Scale text to fit
shinyHubLabel.Font = Enum.Font.SourceSansBold
shinyHubLabel.Parent = greyFrame

-- Add a UIStroke to "Shiny Hub" to make it stand out more
local uiStrokeShiny = Instance.new("UIStroke")
uiStrokeShiny.Thickness = 3
uiStrokeShiny.Color = Color3.fromRGB(255, 255, 255) -- White stroke color
uiStrokeShiny.Parent = shinyHubLabel

-- Create a TextLabel for "gem" below "Shiny Hub"
local gemLabel = Instance.new("TextLabel")
gemLabel.Size = UDim2.new(0, 250, 0, 60)
gemLabel.Position = UDim2.new(0.5, -125, 0.55, 0) -- Centered horizontally, below "Shiny Hub"
gemLabel.BackgroundTransparency = 1 -- No background
gemLabel.TextColor3 = Color3.fromRGB(135, 206, 250) -- Light blue color for "gem"
gemLabel.TextScaled = true -- Scale text to fit
gemLabel.Font = Enum.Font.GothamBlack -- Use GothamBlack for a stronger look
gemLabel.Parent = greyFrame

-- Add a UIStroke to "gem" to enhance its appearance
local uiStrokeGem = Instance.new("UIStroke")
uiStrokeGem.Thickness = 4
uiStrokeGem.Color = Color3.fromRGB(0, 0, 139) -- Dark blue stroke color for contrast
uiStrokeGem.Parent = gemLabel

-- Add a UIGradient to "gem" for a gradient effect
local uiGradientGem = Instance.new("UIGradient")
uiGradientGem.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(173, 216, 230)), -- Light blue at the top
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 191, 255)) -- Deeper blue at the bottom
}
uiGradientGem.Parent = gemLabel

-- Function to update the gem count
local function updateGemCount()
    local player = game.Players.LocalPlayer
    local gems = player:WaitForChild("Gems").Value -- Assuming "Gems" is an IntValue in the player's character

    -- Update the gemLabel's text to include the gem count
    gemLabel.Text = "gem: " .. tostring(gems)
end

-- Call the function to update the gem count initially
updateGemCount()

-- Optional: Update the gem count whenever the player's gem value changes
game.Players.LocalPlayer:WaitForChild("Gems").Changed:Connect(function()
    updateGemCount()
end)
-- Configuration variables
local G_AutoPlay = "Map 2" -- Choose "Map 1" or "Map 2"
local G_AutoUpgrade = true
local G_AutoNext = true
local G_ReplayTime = false -- Set to false to disable timed replay
local G_Tower = "Gen (Adult)"

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Teleport function
local function teleportPlayer()
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-155.1929626468438, 2.9448108673095703, -54.5617790222168)
end

-- Function to place towers near the base position and gradually move farther away
local function placeTowers()
    local basePosition = Vector3.new(-30.740604400634766, 81.7170181274414, 62.73944091796875)
    local placementRadius = 1
    local placementIncrement = 1

    for i = 1, 10 do -- Number of towers to place (adjust as needed)
        local position = basePosition + Vector3.new(math.random(-placementRadius, placementRadius), 0, math.random(-placementRadius, placementRadius))
        local args = {
            [1] = LocalPlayer.OwnedTowers:FindFirstChild(G_Tower),
            [2] = CFrame.new(position) * CFrame.Angles(0, 0, 0),
            [3] = false,
            [4] = true
        }
        ReplicatedStorage.Functions.SpawnTower:InvokeServer(unpack(args))
        placementRadius = placementRadius + placementIncrement
        wait(10)
    end
end

-- Function to randomly upgrade placed towers
local function upgradeTowers()
    for _, tower in ipairs(workspace.Towers:GetChildren()) do
        if tower.Name == G_Tower then
            local args = { tower }
            ReplicatedStorage.Functions.Upgrade:InvokeServer(unpack(args))
        end
    end
end

-- Function to vote for starting the game
local function voteStartGame()
    ReplicatedStorage.Events.Client.VoteStartGame:FireServer()
end

-- Function to vote for skipping rounds
local function voteForSkip()
    for i = 1, 15 do
        ReplicatedStorage.Functions.VoteForSkip:InvokeServer()
        wait(0.5)
    end
end

-- Auto-replay function that checks if the Mobs folder is empty before replaying
local function autoReplay()
    if G_AutoNext then return end -- Skip replay if G_AutoNext is true

    if G_ReplayTime then
        wait(G_ReplayTime)
        local args = { "Replay" }
        ReplicatedStorage.Events.ExitGame:FireServer(unpack(args))
    else
        while true do
            local mobsFolder = workspace:FindFirstChild("Mobs")
            if mobsFolder and #mobsFolder:GetChildren() == 0 then
                wait(5)
                local args = { "Replay" }
                ReplicatedStorage.Events.ExitGame:FireServer(unpack(args))
            else
                wait(1)
            end
        end
    end
end

-- Auto-next function that triggers if there are no remaining mobs
local function autoNext()
    if not G_AutoNext then return end

    while true do
        local mobsFolder = workspace:FindFirstChild("Mobs")
        if mobsFolder and #mobsFolder:GetChildren() == 0 then
            wait(5)
            local args = { "Next" }
            ReplicatedStorage.Events.ExitGame:FireServer(unpack(args))
        else
            wait(1)
        end
    end
end

-- Auto-play function for Map 2
local function autoPlayMap2()
    while true do
        local args = {
            [1] = LocalPlayer.OwnedTowers:FindFirstChild("Gen (Adult)"),
            [2] = CFrame.new(23.12193489074707, -58.516517639160156, 227.15472412109375) * CFrame.Angles(0, 0, 0),
            [3] = false,
            [4] = true
        }
        ReplicatedStorage.Functions.SpawnTower:InvokeServer(unpack(args))
        wait(5)
    end
end

-- Main function
local function main()
    if game.PlaceId == 15601725874 then
        teleportPlayer()
        wait(3)

        local args = {
            [1] = "Level",
            [2] = "Infinity"
        }
        workspace.StoryElevators.Elevator.ElevatorServer.ChangeStory:FireServer(unpack(args))

        workspace.StoryElevators.Elevator.ElevatorServer.Choose:FireServer()
        workspace.StoryElevators.Elevator.ElevatorServer.QuickStart:FireServer()
    end

    wait(10) -- Wait 10 seconds before executing other functions

    if G_AutoPlay == "Map 1" then
        voteStartGame()
        voteForSkip()

        if G_AutoUpgrade then
            spawn(upgradeTowers)
        end

        spawn(autoReplay)
    elseif G_AutoPlay == "Map 2" then
        spawn(autoPlayMap2)
        if G_AutoUpgrade then
            spawn(upgradeTowers)
        end
    end

    spawn(autoNext)
end

main()
